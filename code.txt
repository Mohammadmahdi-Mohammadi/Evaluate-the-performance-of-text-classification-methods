
import numpy as np
import sklearn
import matplotlib.pyplot as plt
from sklearn import datasets
import random
from sklearn.metrics import f1_score
iris = datasets.load_iris()


X = iris.data
y = (iris.target != 2)*1

lr=1000
num_iter=10000

def sigmoid(z):
    return 1 / (1 + np.exp(-z))
        # weights initialization
theta = np.zeros(X.shape[1])
for i in range(num_iter):
    z = np.dot(X, theta)
    h = sigmoid(z)
    gradient = -np.dot(X.T, (h - y)) / y.size
    theta = theta+ lr * gradient
            
    # if(i % 10000 == 0):
        # z = np.dot(X, theta)
        # h = sigmoid(z)

		
z = np.dot(X, theta)
h = sigmoid(z)
#print(h)
h=(h>0.5)
acc=sum(h==y)/len(y)
f1_1 = f1_score(y, h, average='micro')
f1_2 = f1_score(y, h, average='macro')
f1_3 = f1_score(y, h, average='weighted')
print("f1_score:(macro) ",f1_2)
print("f1_score:(weighted) ",f1_3)
print("f1_score (micro): ",f1_1)
print("acc: ",acc)
print(X.shape)
idx1=np.where(y != 0)
idx2=np.where(y == 0)
idx3=np.where(h>0.5)
idx4=np.where(h<0.5)
print(idx1)
print(X[idx1,2])
plt.scatter(X[idx1,0],X[idx1,1],color='blue')
plt.scatter(X[idx2,0],X[idx2,1],color='red')

plt.scatter(X[idx3,0],X[idx3,1],color='green',marker='^')
plt.scatter(X[idx4,0],X[idx4,1],color='black',marker='*')

plt.show()






